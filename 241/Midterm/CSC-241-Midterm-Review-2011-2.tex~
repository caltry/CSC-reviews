% Author: David Larsen <dcl9934@cs.rit.edu>
\documentclass[11pt]{article}
\usepackage{fullpage}
\usepackage{listings}
\usepackage{needspace}
\usepackage{color}
\usepackage{ifthen}
\usepackage{graphicx}


\lstset{ %
basicstyle=\footnotesize,       % the size of the fonts that are used for the code
numbers=left,                   % where to put the line-numbers
stepnumber=1,                   % the step between two line-numbers. If it's 1 each line will be numbered
numbersep=5pt,                  % how far the line-numbers are from the code
showspaces=false,               % show spaces adding particular underscores
showstringspaces=false,         % underline spaces within strings
tabsize=4,		                % sets default tabsize to 4 spaces
language=Python
}

\ifthenelse{\isundefined{\isAnswerKey}}
{
    \newenvironment{answer}{\large\lstset{basicstyle=\large}\color{white}}{}
}
{
    \newenvironment{answer}{\large\lstset{basicstyle=\large}\color{red}}{}
}


\author{Computer Science Community}

\begin{document}
\noindent{\Large CS-241 Midterm Exam Review \hfill Winter, 2011-2}

\begin{enumerate}
    \item\label{reverse()} Write a function which reverses a string (e.g. ``Don't
        get sick'' becomes ``kcis teg t'noD'').

\begin{answer}
\begin{lstlisting}
def reverse( string ):
    if len( string ) < 2:
        return string
    else:
        return reverse( string[1:] ) + string[0]
\end{lstlisting}
\end{answer}

    \item Write a function that takes in a string and returns a string that
          reverses the letters in each word, but keeps the word ordering the
          same.  (e.g. reverse\_words(``I wear a Stetson now -- Stetsons are
          cool'') returns ``I raew a nostetS won -- snostetS era looc''). You
          may use the function reverse() from question \#\ref{reverse()} in
          your solution.

\begin{answer}
\begin{lstlisting}
def reverse_words( string ):
    split_string = string.split()
    return reverse( split_string[0] ) + reverse_words( split_string[1:] )
\end{lstlisting}
\begin{center}{\LARGE OR}\end{center}
\begin{lstlisting}
def reverse_words( string):
    str = ""
    for word in string.split():
        str += reverse( word )
    return str
\end{lstlisting}
\end{answer}

    \item Write a function that takes in a file name, and returns the average
        size of a word eg. a file containing:\\

        lots of work\\
        no rest for midterms\\
        sad for you\\

        has an average length of: 3.6

\begin{answer}
\begin{lstlisting}
def reverse_file( filename ):
    characters = 0
    words = 0
    for line in open(filename):
        for word in line.split():
            words += 1
            characters += len(word)
    return characters/words
\end{lstlisting}
\end{answer}

    \item Perform a substitution trace on 
    \begin{lstlisting}
    reverse('Cinco-fone')
    \end{lstlisting}
%\needspace{15\baselineskip}

\begin{answer}
\begin{lstlisting}
reverse('Cinco-fone')
reverse('inco-fone') + 'C'
reverse('nco-fone') + 'i' + 'C'
reverse('co-fone') + 'n'  + 'i' + 'C'
reverse('o-fone') + 'c' + 'n'  + 'i' + 'C'
reverse('-fone') + 'o'  + 'c' + 'n'  + 'i' + 'C'
reverse('fone') + '-'  + 'o'  + 'c' + 'n'  + 'i' + 'C'
reverse('one') + 'f' + '-'  + 'o'  + 'c' + 'n'  + 'i' + 'C'
reverse('ne') + 'o' + 'f' + '-'  + 'o'  + 'c' + 'n'  + 'i' + 'C'
reverse('e') + 'n' + 'o' + 'f' + '-'  + 'o'  + 'c' + 'n'  + 'i' + 'C'
'e' + 'n' + 'o' + 'f' + '-'  + 'o'  + 'c' + 'n'  + 'i' + 'C'
'enof-ocniC'

\end{lstlisting}
\end{answer}
    \item Write a function that takes in a list of numbers and returns the sum
        of all of those numbers.
        \begin{enumerate}
            \item Recursively.
\begin{answer}
\begin{lstlisting}
def sum( numbers ):
    if len(numbers) == 0:
        return 0
    else
        return numbers[0] + sum( numbers[1:] )
\end{lstlisting}
\end{answer}

            \item Iteratively
\begin{answer}
\begin{lstlisting}
def sum( numbers ):
    index = 0
    sum = 0
    while index < len(numbers):
        sum += numbers[index]
        index += 1
    return sum
\end{lstlisting}
\end{answer}
\end{enumerate}
            \item How would you test this function?
                \begin{answer}
                \begin{itemize}
                    \item Empty list
                    \item 1 element list
                    \item multi-element list
                \end{itemize}
                \end{answer}

\item Assuming the turtle is facing east, write the python code to draw the following picture given the proper depth as input:
    \begin{itemize}
            \item depth = 0
           \\No output 
            \item depth = 1\\
            \includegraphics[scale=0.4]{1.png}
            \item depth = 2 \\
            \includegraphics[scale=0.4]{2.png}
            \item depth = 3\\
            \includegraphics[scale=0.4]{3.png}
        \end{itemize}
    \begin{answer}
    \begin{lstlisting}
       def drawSqaures( length, depth ):
           if depth <= 0:
               return
           count = 4
           while count > 0:
               turtle.forward( length )
               turtle.left( 90 )
               drawSqaures( length/2, depth-1 )
               turtle.right( 180 )
               count -= 1
      \end{lstlisting}
     \end{answer}

    \item What does the following evaluate to?
    \begin{lstlisting}

    \end{lstlisting}
 \end{enumerate}
\end{document}
